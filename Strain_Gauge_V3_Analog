/*
Name: Let monkey sit still
Author: Chenghang Zhang
Date: 1/4/2025
Exp: Get strain gauge measurement in an array to calculate running average. When a motion is detected (current measurement > Sensitivity),
reward won't be given for the current session. 
Running average sampling rate and motion detection sampling will be similar
Note that one measurement loop takes 20ms, rewrad taks reward_time*10ms (default 100ms). Motion during this time won't be considered regardless of interval_time. 

Encoding for real_time data processing: 
0: Init. 
1: Session start
2: Motion detected. 
3: Reward given. 
4: Session end. 
Init is given at start of loop so that the console now the starting point. 
What you see in real-time data processing: Succeed session: 50/52, sitting still rate: 96.XXXXX%. 
*/

#define DIN A0
#define DOUT 2

//sampling parameter: 
const int interval_time = 750; //There is no actual idel interval time in this experiment. 
const int array_size = 20; //Define the size of running average array. Longer array means more sampling during the interval time. 
const int sampling_rate = interval_time / array_size;//After a reward, strain gauge voltages will be read during the interval at the sampleing rate determined by "array_size". 
const int punish_duration = 100; //How long the monk won't get any water after a certain time. 

//Motion detection parametner
const float Sensitivity = 0.005;  //Lower value for higher sensitivigty. The resolution of Arduino analog input for 5V supply is ~0.005V. 
const int reward_repeat_time = 10; //Get more reward if needed. 

int reward_flag = 1;
float cur_voltage;
float running_measure[array_size];
int running_measure_pointer = 1;
float running_ave = 0;

void setup() {
  //alogReference(INTERNAL);
  Serial.begin(9600);  // Start the serial communication at 9600 baud rate
  pinMode(DIN, INPUT); //set A0 as input pin
  pinMode(DOUT, OUTPUT); 

  for (int i=0;i<array_size;i++){
    //Running average init. 
    insert_running_average();
  }
  Serial.println("0-Init done! ");
}

void loop() {
  //give_reward(10);
  Serial.println("1-Session Start");
  
  for (int i = 1;i<=(int)sampling_rate;i++){
    insert_running_average(); //update the array and cur_voltage. 
    update_running_ave(); //update running_ave. 
    if (abs(running_ave - cur_voltage) >= Sensitivity){
      reward_flag = 0;
      Serial.println("2-Motion_detected");
    }
  }
  //Serial.print("Cur_voltage: ");
 // Serial.println(cur_voltage);
  //Serial.print("Running_average_voltage: ");
  //Serial.println(running_ave);
  if (reward_flag == 1){
    Serial.println("3-Giving reward! ");
    give_reward(reward_repeat_time);
    
  } else {
    give_reward(0);
    delay(punish_duration);
  }
  reward_flag = 1;
  
  Serial.println("4-Session END---------------------");
  //digitalWrite(2, LOW);
}

//--------------------------------------------------------------------------------------------------------------
//Utility functions: 
float get_strain_voltage() {
  int a1=0; 
  for (int i = 1; i <= 30; i++) {
    a1 += analogRead(A0); delay (1);
  }
  int analogValue = a1/30;
  //int analogValue = analogRead(A0);
  
  float voltage = analogValue * (4.8 / 1023.0);  // Convert to voltage (assuming 5V reference)
  return voltage;
}

float set_zero() {
  int a0 = 0;
  for (int i = 1; i <= 20; i++) {
    a0 += analogRead(A0); delay (20);
  }
  return a0/20*(5.0/1023.0);
}

void give_reward(int repeat_time){
  //0 means no reward
  delay(60);
  for (int i=1;i<=repeat_time;i++){
    digitalWrite(2, HIGH);
    delay(60);
    digitalWrite(2, LOW);
    delay(60);
  }
}

void insert_running_average(){
  //return current measurement of the voltage
  cur_voltage = get_strain_voltage();
  running_measure[running_measure_pointer] = cur_voltage;
  running_measure_pointer += 1;
  if (running_measure_pointer >= array_size){
    running_measure_pointer = 0;
  }
}
void update_running_ave(){
  float sum = 0;
  for (int i=0;i<array_size;i++){
    sum += running_measure[i];
  }
  running_ave = sum/array_size;
}
